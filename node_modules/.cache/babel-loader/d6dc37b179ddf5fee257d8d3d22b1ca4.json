{"ast":null,"code":"import * as actionTypes from \"./actionTypes\";\nimport axios from 'axios';\nexport const authStart = () => {\n  return {\n    type: actionTypes.AUTH_START\n  };\n};\nexport const authSuccess = token => {\n  return {\n    type: actionTypes.AUTH_SUCCESS,\n    token: token\n  };\n};\nexport const authFail = error => {\n  return {\n    type: actionTypes.AUTH_FAIL,\n    error: error\n  };\n};\nexport const logout = () => {\n  localStorage.removeItem('token');\n  localStorage.removeItem('expirationDate');\n  return {\n    type: actionTypes.AUTH_LOGOUT\n  };\n};\nexport const checkAuthTimeout = expirationTime => {\n  return dispatch => {\n    setTimeout(() => {\n      dispatch(logout());\n    }, expirationTime * 1000);\n  };\n};\nexport const authLogin = (username, password) => {\n  return dispatch => {\n    dispatch(authStart());\n    axios.post('http://127.0.0.1:8000/rest-auth/login/', {\n      username: username,\n      password: password\n    }).then(res => {\n      const token = res.data.key;\n      const expirationDate = new Date(new Date().getTime() + 3600 * 1000);\n      localStorage.setItem('token', token);\n      localStorage.setItem('expirationDate', expirationDate);\n      dispatch(authSuccess(token));\n      dispatch(checkAuthTimeout(3600));\n    }).catch(err => {\n      dispatch(authFail(err));\n    });\n  };\n};\nexport const authCheckState = () => {\n  return dispatch => {\n    const token = localStorage.getItem('token');\n\n    if (token === undefined) {\n      dispatch(logout());\n    } else {\n      const expirationDate = new Date(localStorage.getItem('expirationDate'));\n\n      if (expirationDate <= new Date()) {\n        dispatch(logout());\n      } else {\n        dispatch(authSuccess(token));\n        dispatch(checkAuthTimeout(expirationDate.getTime() - new Date().getTime() / 1000));\n      }\n    }\n  };\n};","map":{"version":3,"sources":["C:/Users/emily/OneDrive/Documents/Git/SCU-ELSE/src/store/actions/auth.js"],"names":["actionTypes","axios","authStart","type","AUTH_START","authSuccess","token","AUTH_SUCCESS","authFail","error","AUTH_FAIL","logout","localStorage","removeItem","AUTH_LOGOUT","checkAuthTimeout","expirationTime","dispatch","setTimeout","authLogin","username","password","post","then","res","data","key","expirationDate","Date","getTime","setItem","catch","err","authCheckState","getItem","undefined"],"mappings":"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","sourcesContent":["import * as actionTypes from \"./actionTypes\";\r\nimport axios from 'axios';\r\n\r\nexport const authStart = () => {\r\n\treturn {\r\n\t\ttype: actionTypes.AUTH_START\r\n\t}\r\n}\r\n\r\nexport const authSuccess = token => {\r\n\treturn {\r\n\t\ttype: actionTypes.AUTH_SUCCESS,\r\n\t\ttoken: token\r\n\t}\r\n}\r\n\r\nexport const authFail = error => {\r\n\treturn {\r\n\t\ttype: actionTypes.AUTH_FAIL,\r\n\t\terror: error\r\n\t}\r\n}\r\n\r\nexport const logout = () => {\r\n\tlocalStorage.removeItem('token');\r\n\tlocalStorage.removeItem('expirationDate');\r\n\treturn {\r\n\t\ttype: actionTypes.AUTH_LOGOUT\r\n\t}\r\n}\r\n\r\nexport const checkAuthTimeout = expirationTime => {\r\n\treturn dispatch => {\r\n\t\tsetTimeout(() => {\r\n\t\t\tdispatch(logout());\t\r\n\t\t}, expirationTime*1000)\r\n\t}\r\n}\r\n\r\nexport const authLogin = (username, password) => {\r\n\treturn dispatch => {\r\n\t\tdispatch(authStart());\r\n\t\taxios.post('http://127.0.0.1:8000/rest-auth/login/', {\r\n\t\t\tusername: username,\r\n\t\t\tpassword: password\r\n\t\t})\r\n\t\t.then(res => {\r\n\t\t\tconst token = res.data.key;\r\n\t\t\tconst expirationDate = new Date(new Date().getTime() + 3600 * 1000);\r\n\t\t\tlocalStorage.setItem('token', token);\r\n\t\t\tlocalStorage.setItem('expirationDate', expirationDate);\r\n\t\t\tdispatch(authSuccess(token));\r\n\t\t\tdispatch(checkAuthTimeout(3600));\r\n\t\t})\r\n\t\t.catch(err => {\r\n\t\t\tdispatch(authFail(err))\r\n\t\t})\r\n\t}\r\n}\r\n\r\nexport const authCheckState = () => {\r\n\treturn dispatch => {\r\n\t\tconst token = localStorage.getItem('token');\r\n\t\tif (token === undefined) {\r\n\t\t\tdispatch(logout());\r\n\t\t}\r\n\t\telse {\r\n\t\t\tconst expirationDate = new Date(localStorage.getItem('expirationDate'));\r\n\t\t\tif (expirationDate <= new Date()) {\r\n\t\t\t\tdispatch(logout());\r\n\t\t\t}\r\n\t\t\telse {\r\n\t\t\t\tdispatch(authSuccess(token));\r\n\t\t\t\tdispatch(checkAuthTimeout(expirationDate.getTime() - new Date().getTime()/1000));\r\n\t\t\t}\r\n\t\t}\r\n\t}\r\n}\r\n\r\n"]},"metadata":{},"sourceType":"module"}